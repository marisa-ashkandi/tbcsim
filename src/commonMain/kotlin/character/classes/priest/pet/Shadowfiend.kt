package character.classes.priest.pet

import character.*
import character.classes.priest.pet.abilities.Melee
import character.classes.priest.pet.buffs.ShadowfiendBase
import data.Constants
import data.model.Item
import data.model.ItemSet
import data.model.Socket
import data.model.SocketBonus

class Shadowfiend : Class(mapOf(), ShadowfiendSpec()) {
    companion object {
        fun makePetAttackItem(name: String, minDmg: Double, maxDmg: Double): Item {
            return object : Item() {
                override var isAutoGenerated: Boolean = false
                override var id: Int = -1
                override var name: String = name
                override var itemLevel: Int = 1
                override var quality: Int = 1
                override var icon: String = ""
                override var itemSet: ItemSet? = null
                override var inventorySlot: Int = 21
                override var itemClass: Constants.ItemClass? = null
                override var itemSubclass: Constants.ItemSubclass? = null
                override var minDmg: Double = minDmg
                override var maxDmg: Double = maxDmg
                override var speed: Double = 1.0
                override var stats: Stats = Stats()
                override var sockets: Array<Socket> = arrayOf()
                override var socketBonus: SocketBonus? = null
                override var phase = 1
            }
        }
    }
    
    override var baseStats: Stats = Stats()

    override fun talentFromString(name: String, ranks: Int): Talent? {
        return null
    }

    override fun abilityFromString(name: String, item: Item?): Ability? {
        return null
    }
    

    override val buffs: List<Buff> = listOf(ShadowfiendBase())

    override val resourceTypes: List<Resource.Type> = listOf(Resource.Type.MANA)
    override var canDualWield: Boolean = false
    override var attackPowerFromAgility: Int = 0
    override var attackPowerFromStrength: Int = 0
    override val critPctPerAgility: Double = 0.0
    override val dodgePctPerAgility: Double = 0.0
    override val baseDodgePct: Double = 0.0
    override var rangedAttackPowerFromAgility: Int = 0
    override val baseMana: Int = 2241
    override val baseSpellCritChance: Double = 0.0
}
