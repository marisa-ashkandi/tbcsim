package character.classes.priest.pet.abilities

import character.Ability
import character.auto.AutoAttackBase
import character.classes.priest.Priest
import character.classes.priest.pet.Shadowfiend
import character.Proc
import character.Resource
import character.Stats
import data.Constants
import data.model.Item
import data.model.ItemSet
import data.model.Socket
import data.model.SocketBonus
import mechanics.Spell
import mechanics.Melee
import sim.SimParticipant
import sim.*

class Melee : AutoAttackBase() {
    companion object {
        const val name = "Melee"
        const val manaRestoreName = "Shadowfiend"
    }
    override val id: Int = 1
    override val name: String = Companion.name
    override fun gcdMs(sp: SimParticipant): Int = 1500

    override fun castTimeMs(sp: SimParticipant): Int = 0
    override fun resourceCost(sp: SimParticipant): Double {
        return sp.character.klass.baseMana * 0.01
    }

    val school = Constants.DamageType.SHADOW
    override fun item(sp: SimParticipant): Item {
        return object : Item() {
            override var isAutoGenerated: Boolean = false
            override var id: Int = -1
            override var name: String = "Melee (Pet)"
            override var itemLevel: Int = 1
            override var quality: Int = 1
            override var icon: String = ""
            override var itemSet: ItemSet? = null
            override var inventorySlot: Int = 21
            override var itemClass: Constants.ItemClass? = null
            override var itemSubclass: Constants.ItemSubclass? = null
            override var minDmg: Double = 99.0 + 0.12 * (sp.stats.attackPower.toDouble() - 286.0)
            override var maxDmg: Double = 123.0 + 0.12 * (sp.stats.attackPower.toDouble() - 286.0)
            override var speed: Double = basePetAttackSpeed
            override var stats: Stats = Stats()
            override var sockets: Array<Socket> = arrayOf()
            override var socketBonus: SocketBonus? = null
            override var phase = 1
        }
    }

    val basePetAttackSpeed: Double = 1500.0
    override fun cast(sp: SimParticipant) {
        val damageRoll = Melee.baseDamageRoll(sp, item(sp))
        val result = Melee.attackRoll(sp, damageRoll, item(sp), isWhiteDmg = true)

        // Save last hit state and fire event
        (state(sp) as AutoAttackState).lastAttackTimeMs = sp.sim.elapsedTimeMs
        (state(sp) as AutoAttackState).count += 1

        val event = Event(
            eventType = EventType.DAMAGE,
            damageType = Constants.DamageType.SHADOW,
            isWhiteDamage = true,
            abilityName = name,
            amount = result.first,
            result = result.second,
        )
        sp.logEvent(event)

        // Mana restored seems to be roughly 2.5 times the dmg. 
        // https://web.archive.org/web/20071201221602/http://www.shadowpriest.com/viewtopic.php?t=7616
        // Also tested with 1.9k dmg which returned 4.7k mana
        sp.owner?.addResource((result.first * 2.5).toInt(), Resource.Type.MANA, Companion.manaRestoreName)

        // Proc anything that can proc off a white hit
        val triggerTypes = when(result.second) {
            EventResult.HIT -> listOf(Proc.Trigger.MELEE_AUTO_HIT, Proc.Trigger.MELEE_WHITE_HIT, Proc.Trigger.PHYSICAL_DAMAGE)
            EventResult.CRIT -> listOf(Proc.Trigger.MELEE_AUTO_CRIT, Proc.Trigger.MELEE_WHITE_CRIT, Proc.Trigger.PHYSICAL_DAMAGE)
            EventResult.MISS -> listOf(Proc.Trigger.MELEE_MISS)
            EventResult.GLANCE -> listOf(Proc.Trigger.MELEE_AUTO_HIT, Proc.Trigger.MELEE_GLANCE, Proc.Trigger.PHYSICAL_DAMAGE)
            EventResult.DODGE -> listOf(Proc.Trigger.MELEE_DODGE)
            EventResult.PARRY -> listOf(Proc.Trigger.MELEE_PARRY)
            EventResult.BLOCK -> listOf(Proc.Trigger.MELEE_AUTO_HIT, Proc.Trigger.MELEE_WHITE_HIT, Proc.Trigger.PHYSICAL_DAMAGE)
            EventResult.BLOCKED_CRIT -> listOf(Proc.Trigger.MELEE_AUTO_CRIT, Proc.Trigger.MELEE_WHITE_CRIT, Proc.Trigger.PHYSICAL_DAMAGE)
            else -> null
        }

        if(triggerTypes != null) {
            sp.fireProc(triggerTypes, listOf(item(sp)), this, event)
        }
    }
}